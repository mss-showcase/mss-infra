name: Deploy MSS Stock Sentiment Analyzer Lambda

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  SHARED_DATA_BUCKET: ${{ vars.SHARED_DATA_BUCKET }}
  SHARED_BUILD_DATA_BUCKET: ${{ vars.SHARED_BUILD_DATA_BUCKET }}
  FILENAME_OF_SENTIMENT_LAMBDAS_ON_S3_BUILD_BUCKET: ${{ vars.FILENAME_OF_SENTIMENT_LAMBDAS_ON_S3_BUILD_BUCKET }}
  MSS_FEED_READER_LAMBDA_NAME: ${{ vars.MSS_FEED_READER_LAMBDA_NAME }}
  MSS_FINANCIAL_SENTIMENT_LAMBDA_NAME: ${{ vars.MSS_FINANCIAL_SENTIMENT_LAMBDA_NAME }}
  DYNAMODB_SENTIMENT_ARTICLES_TABLE: ${{ vars.DYNAMODB_SENTIMENT_ARTICLES_TABLE }}
  DYNAMODB_SENTIMENT_FEEDS_TABLE: ${{ vars.DYNAMODB_SENTIMENT_FEEDS_TABLE }}
  FEED_URLS: ${{ vars.FEED_URLS }}
  LOCAL_LAMBDA_FILE: mss-sentiments-lambda.zip

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Download Lambda artifact from S3 build bucket (used for both lambdas)
        run: |
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/deploy/$FILENAME_OF_SENTIMENT_LAMBDAS_ON_S3_BUILD_BUCKET/$FILENAME_OF_SENTIMENT_LAMBDAS_ON_S3_BUILD_BUCKET.zip $LOCAL_LAMBDA_FILE.zip

      - name: Init Terraform
        working-directory: terraform/deploy-financial-sentiment
        run: terraform init -input=false -upgrade

      - name: Terraform Format Check
        working-directory: terraform/deploy-financial-sentiment
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: terraform/deploy-financial-sentiment
        run: terraform validate

      - name: Write Terraform variable file for both lambdas
        working-directory: terraform/deploy-financial-sentiment
        run: |
          cat <<EOF > ci.auto.tfvars
          build_data_bucket         = "${SHARED_BUILD_DATA_BUCKET}"
          shared_data_bucket = "${SHARED_DATA_BUCKET}"
          feed_reader_lambda_name               = "${MSS_FEED_READER_LAMBDA_NAME}"
          financial_sentiment_lambda_name       = "${MSS_FINANCIAL_SENTIMENT_LAMBDA_NAME}"
          articles_table        = "${DYNAMODB_SENTIMENT_ARTICLES_TABLE}"
          feeds_table        = "${DYNAMODB_SENTIMENT_FEEDS_TABLE}"
          aws_region         = "${AWS_REGION}"
          artifact_key              = "deploy/${FILENAME_OF_SENTIMENT_LAMBDAS_ON_S3_BUILD_BUCKET}/${FILENAME_OF_SENTIMENT_LAMBDAS_ON_S3_BUILD_BUCKET}.zip"
          feed_urls                  = "${FEED_URLS}"
          EOF

      - name: Terraform plan
        working-directory: terraform/deploy-financial-sentiment
        run: terraform plan -input=false -var-file=ci.auto.tfvars

      - name: Terraform Import IAM Role 
        working-directory: terraform/deploy-financial-sentiment
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_iam_role.sentiment_lambda_exec_role sentiment-lambda-exec-role || true

      - name: Terraform Import Lambda Function 
        working-directory: terraform/deploy-financial-sentiment
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_lambda_function.feed_reader_lambda $MSS_FEED_READER_LAMBDA_NAME || true

      - name: Terraform Import Financial Sentiment Lambda Function 
        working-directory: terraform/deploy-financial-sentiment
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_lambda_function.financial_sentiment_lambda $MSS_FINANCIAL_SENTIMENT_LAMBDA_NAME || true

      - name: Terraform Import SQS Queue
        working-directory: terraform/deploy-financial-sentiment
        run: |
          QUEUE_URL=$(aws sqs get-queue-url --queue-name "${MSS_FEED_READER_LAMBDA_NAME}-queue" --region "$AWS_REGION" --output text --query QueueUrl 2>/dev/null || echo "")
          if [ -n "$QUEUE_URL" ]; then
            terraform import -input=false -var-file=ci.auto.tfvars aws_sqs_queue.sentiment_queue "$QUEUE_URL" || true
          else
            echo "SQS queue ${MSS_FEED_READER_LAMBDA_NAME}-queue not found, skipping import."
          fi

      - name: Terraform Import SQS Event Source Mapping
        working-directory: terraform/deploy-financial-sentiment
        run: |
          # Get the SQS queue ARN and lambda function ARN to find existing event source mapping
          SQS_ARN=$(aws sqs get-queue-attributes --queue-url $(aws sqs get-queue-url --queue-name "${MSS_FEED_READER_LAMBDA_NAME}-queue" --region "$AWS_REGION" --output text --query QueueUrl) --attribute-names QueueArn --region "$AWS_REGION" --output text --query Attributes.QueueArn 2>/dev/null || echo "")
          LAMBDA_ARN=$(aws lambda get-function --function-name "$MSS_FINANCIAL_SENTIMENT_LAMBDA_NAME" --region "$AWS_REGION" --output text --query Configuration.FunctionArn 2>/dev/null || echo "")
          if [ -n "$SQS_ARN" ] && [ -n "$LAMBDA_ARN" ]; then
            ESM_UUID=$(aws lambda list-event-source-mappings --function-name "$LAMBDA_ARN" --event-source-arn "$SQS_ARN" --region "$AWS_REGION" --output text --query EventSourceMappings[0].UUID 2>/dev/null || echo "")
            if [ -n "$ESM_UUID" ] && [ "$ESM_UUID" != "None" ]; then
              terraform import -input=false -var-file=ci.auto.tfvars aws_lambda_event_source_mapping.sqs_to_sentiment_lambda "$ESM_UUID" || true
            fi
          fi

      - name: Terraform Import Lambda Allow Events Permission
        working-directory: terraform/deploy-financial-sentiment
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_lambda_permission.allow_events $MSS_FEED_READER_LAMBDA_NAME/AllowExecutionFromCloudWatch || true

      - name: Terraform Import Articles Table
        working-directory: terraform/deploy-financial-sentiment
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_dynamodb_table.articles_table $DYNAMODB_SENTIMENT_ARTICLES_TABLE || true

      - name: Terraform Import Feeds Table
        working-directory: terraform/deploy-financial-sentiment
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_dynamodb_table.feeds_table $DYNAMODB_SENTIMENT_FEEDS_TABLE || true

      - name: Terraform apply
        working-directory: terraform/deploy-financial-sentiment
        run: terraform apply -input=false -auto-approve -var-file=ci.auto.tfvars
