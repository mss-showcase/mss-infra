name: Deploy CloudFront for Frontend

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  WEBHOSTING_BUCKET: ${{ vars.WEBHOSTING_BUCKET }}
  SHARED_BUILD_DATA_BUCKET: ${{ vars.SHARED_BUILD_DATA_BUCKET }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Init Terraform
        working-directory: terraform/cloudfront
        run: terraform init -input=false -upgrade

      - name: Write Terraform variable file
        working-directory: terraform/cloudfront
        run: |
          cat <<EOF > ci.auto.tfvars
          webhosting_bucket = "${WEBHOSTING_BUCKET}"
          aws_region        = "${AWS_REGION}"
          EOF
          terraform fmt ci.auto.tfvars

      - name: Download CloudFront Distribution ID from S3 (if exists)
        run: |
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_DISTRIBUTION_ID.txt CLOUDFRONT_DISTRIBUTION_ID.txt --region $AWS_REGION || true
          if [ -f CLOUDFRONT_DISTRIBUTION_ID.txt ]; then
            export DISTRIBUTION_ID=$(cat CLOUDFRONT_DISTRIBUTION_ID.txt | tr -d '\n')
            echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV
          fi

      - name: Terraform Import CloudFront Distribution
        working-directory: terraform/cloudfront
        run: |
          if [ -n "$DISTRIBUTION_ID" ]; then
            terraform import -input=false aws_cloudfront_distribution.cf_distribution "$DISTRIBUTION_ID" || true
          else
            echo "No CloudFront Distribution ID found, skipping import."
          fi

      - name: Download CloudFront Response Headers Policy ID from S3 (if exists)
        run: |
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_RESPONSE_HEADERS_POLICY_ID.txt CLOUDFRONT_RESPONSE_HEADERS_POLICY_ID.txt --region $AWS_REGION || true
          if [ -f CLOUDFRONT_RESPONSE_HEADERS_POLICY_ID.txt ]; then
            export RESPONSE_HEADERS_POLICY_ID=$(cat CLOUDFRONT_RESPONSE_HEADERS_POLICY_ID.txt | tr -d '\n')
            echo "RESPONSE_HEADERS_POLICY_ID=$RESPONSE_HEADERS_POLICY_ID" >> $GITHUB_ENV
          fi

      - name: Terraform Import CloudFront Response Headers Policy
        working-directory: terraform/cloudfront
        run: |
          if [ -n "$RESPONSE_HEADERS_POLICY_ID" ]; then
            terraform import -input=false aws_cloudfront_response_headers_policy.coop_unsafe_none "$RESPONSE_HEADERS_POLICY_ID" || true
          else
            echo "No CloudFront Response Headers Policy ID found, skipping import."
          fi

      - name: Terraform Import CloudFront Origin Access Identity (OAI)
        working-directory: terraform/cloudfront
        run: |
          if [ -n "$DISTRIBUTION_ID" ]; then
            # Fetch the OAI ID from the CloudFront distribution config
            OAI_ID=$(aws cloudfront get-distribution --id "$DISTRIBUTION_ID" --region "$AWS_REGION" \
              --query "Distribution.DistributionConfig.Origins.Items[0].S3OriginConfig.OriginAccessIdentity" --output text | awk -F'/' '{print $NF}')
            if [ -n "$OAI_ID" ] && [ "$OAI_ID" != "None" ]; then
              terraform import -input=false aws_cloudfront_origin_access_identity.oai "$OAI_ID" || true
              echo "Imported OAI $OAI_ID"
            else
              echo "No OAI ID found in distribution config, skipping import."
            fi
          else
            echo "No CloudFront Distribution ID found, cannot fetch OAI ID. Skipping import."
          fi

      - name: Terraform Format Check
        working-directory: terraform/cloudfront
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: terraform/cloudfront
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform/cloudfront
        run: terraform plan -input=false -var-file=ci.auto.tfvars

      - name: Terraform Apply
        working-directory: terraform/cloudfront
        run: terraform apply -input=false -auto-approve -var-file=ci.auto.tfvars

      - name: Get CloudFront Distribution outputs
        id: cf_outputs
        working-directory: terraform/cloudfront
        run: |
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
          DOMAIN_NAME=$(terraform output -raw cloudfront_domain_name)
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV
          echo "DOMAIN_NAME=$DOMAIN_NAME" >> $GITHUB_ENV
          echo "$DISTRIBUTION_ID" > ../../CLOUDFRONT_DISTRIBUTION_ID.txt
          echo "$DOMAIN_NAME" > ../../CLOUDFRONT_DOMAIN_NAME.txt
          RESPONSE_HEADERS_POLICY_ID=$(terraform output -raw coop_unsafe_none_response_headers_policy_id)
          echo "RESPONSE_HEADERS_POLICY_ID=$RESPONSE_HEADERS_POLICY_ID" >> $GITHUB_ENV
          echo "$RESPONSE_HEADERS_POLICY_ID" > ../../CLOUDFRONT_RESPONSE_HEADERS_POLICY_ID.txt

      - name: Upload CloudFront outputs to S3
        run: |
          aws s3 cp CLOUDFRONT_DISTRIBUTION_ID.txt s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_DISTRIBUTION_ID.txt --region $AWS_REGION
          aws s3 cp CLOUDFRONT_DOMAIN_NAME.txt s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_DOMAIN_NAME.txt --region $AWS_REGION
          aws s3 cp CLOUDFRONT_RESPONSE_HEADERS_POLICY_ID.txt s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_RESPONSE_HEADERS_POLICY_ID.txt --region $AWS_REGION

      - name: Display CloudFront URLs
        run: |
          echo "CloudFront Distribution ID: $DISTRIBUTION_ID"
          echo "CloudFront Domain Name: $DOMAIN_NAME"
          echo "CloudFront Response headers policy ID: $RESPONSE_HEADERS_POLICY_ID"
          echo "HTTPS Frontend URL: https://$DOMAIN_NAME"
