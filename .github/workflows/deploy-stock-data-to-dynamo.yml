name: Deploy MSS Stock Data To Dynamo Lambda

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  SHARED_DATA_BUCKET: ${{ vars.SHARED_DATA_BUCKET }}
  SHARED_BUILD_DATA_BUCKET: ${{ vars.SHARED_BUILD_DATA_BUCKET }}
  LAMBDA_NAME: ${{ vars.MSS_STOCK_DATA_TO_DYNAMO_LAMBDA_NAME }}
  MSS_STOCK_DATA_TO_DYNAMO_VERSION: 1.0.0
  MSS_STOCK_DATA_TO_DYNAMO_LOCATION_ON_BUCKET: "deploy/mss-stock-data-to-dynamo/${MSS_STOCK_DATA_TO_DYNAMO_VERSION}/mss-stock-data-to-dynamo.zip"
  FILES_TABLE: ${{ vars.FILES_TABLE }}
  TICKS_TABLE: ${{ vars.TICKS_TABLE }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Download $LAMBDA_NAME artifact from S3 build bucket
        run: |
          echo "Downloading $LAMBDA_NAME artifact from S3 bucket: ${SHARED_BUILD_DATA_BUCKET}, location: ${MSS_STOCK_DATA_TO_DYNAMO_LOCATION_ON_BUCKET}"
          aws s3 cp s3://${SHARED_BUILD_DATA_BUCKET}/${MSS_STOCK_DATA_TO_DYNAMO_LOCATION_ON_BUCKET} lambda.zip

      - name: Init Terraform
        working-directory: terraform/deploy-stock-data-to-dynamo
        run: terraform init -input=false -upgrade

      - name: Terraform Format Check
        working-directory: terraform/deploy-stock-data-to-dynamo
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: terraform/deploy-stock-data-to-dynamo
        run: terraform validate

      - name: Write Terraform variable file
        working-directory: terraform/deploy-stock-data-to-dynamo
        run: |
          cat <<EOF > ci.auto.tfvars
          lambda_name        = "${LAMBDA_NAME}"
          build_data_bucket  = "${SHARED_BUILD_DATA_BUCKET}"
          shared_data_bucket = "${SHARED_DATA_BUCKET}"
          s3_key             = "${MSS_STOCK_DATA_TO_DYNAMO_LOCATION_ON_BUCKET#'/'}"
          files_table        = "${FILES_TABLE}"
          ticks_table        = "${TICKS_TABLE}"
          aws_region         = "${AWS_REGION}"
          EOF

      - name: Terraform plan
        working-directory: terraform/deploy-stock-data-to-dynamo
        run: terraform plan -input=false -var-file=ci.auto.tfvars

      - name: Terraform Import Lambda Function
        working-directory: terraform/deploy-stock-data-to-dynamo
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_lambda_function.stock_data_to_dynamo $LAMBDA_NAME || true

      - name: Terraform Import Files Table
        working-directory: terraform/deploy-stock-data-to-dynamo
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_dynamodb_table.m7_imported_files $FILES_TABLE || true

      - name: Terraform Import Ticks Table
        working-directory: terraform/deploy-stock-data-to-dynamo
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_dynamodb_table.m7_ticks $TICKS_TABLE || true

      - name: Terraform Import Lambda Exec Role
        working-directory: terraform/deploy-stock-data-to-dynamo
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_iam_role.lambda_exec_role ${LAMBDA_NAME}-exec-role || true

      - name: Terraform Import Lambda Permission
        working-directory: terraform/deploy-stock-data-to-dynamo
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_lambda_permission.allow_s3 ${LAMBDA_NAME}/AllowExecutionFromS3 || true

      - name: Terraform apply
        working-directory: terraform/deploy-stock-data-to-dynamo
        run: terraform apply -input=false -auto-approve -var-file=ci.auto.tfvars