name: Configure Cognito User Pool

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  SHARED_BUILD_DATA_BUCKET: ${{ vars.SHARED_BUILD_DATA_BUCKET }}
  COGNITO_POOL_ID_FILE: ${{ vars.COGNITO_POOL_ID_FILE }}
  COGNITO_CLIENT_ID_FILE: ${{ vars.COGNITO_CLIENT_ID_FILE }}
  COGNITO_ADMIN_USERNAME: ${{ vars.COGNITO_ADMIN_USERNAME }}
  COGNITO_ADMIN_PASSWORD: ${{ secrets.COGNITO_ADMIN_PASSWORD }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

jobs:
  configure-cognito:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Init Terraform
        working-directory: terraform/cognito
        run: terraform init -input=false -upgrade

      - name: Download CloudFront domain name from S3
        working-directory: terraform/cognito
        run: |
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_DOMAIN_NAME.txt CLOUDFRONT_DOMAIN_NAME.txt --region $AWS_REGION
          echo "CLOUDFRONT_DOMAIN_NAME=$(tr -d '\n' < CLOUDFRONT_DOMAIN_NAME.txt)" >> $GITHUB_ENV

      - name: Get Cognito User Pool and Client IDs
        id: cognito_ids
        working-directory: terraform/cognito
        run: |
          # Try to fetch IDs from S3 files first
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_POOL_ID_FILE $COGNITO_POOL_ID_FILE --region $AWS_REGION || true
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_CLIENT_ID_FILE $COGNITO_CLIENT_ID_FILE --region $AWS_REGION || true

          # Only write valid, non-empty, non-warning values
          if [ -f "$COGNITO_POOL_ID_FILE" ]; then
            export USER_POOL_ID=$(cat "$COGNITO_POOL_ID_FILE" | tr -d '\n')
            echo "USER_POOL_ID=$USER_POOL_ID" >> $GITHUB_ENV
            echo "USER_POOL_ID=$USER_POOL_ID"
          fi
          if [ -f "$COGNITO_CLIENT_ID_FILE" ]; then
            export CLIENT_ID=$(cat "$COGNITO_CLIENT_ID_FILE" | tr -d '\n')
            echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
            echo "CLIENT_ID=$CLIENT_ID"
          fi

      - name: Write Terraform variable file
        working-directory: terraform/cognito
        run: |
          cat <<EOF > ci.auto.tfvars
          aws_region               = "${AWS_REGION}"
          google_client_id         = "${GOOGLE_CLIENT_ID}"
          google_client_secret     = "${GOOGLE_CLIENT_SECRET}"
          cloudfront_domain_name   = "${CLOUDFRONT_DOMAIN_NAME}"
          cognito_user_pool_id     = "${USER_POOL_ID}"
          cognito_user_pool_client_id = "${CLIENT_ID}"
          EOF
          terraform fmt ci.auto.tfvars

      - name: Terraform Format Check
        working-directory: terraform/cognito
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: terraform/cognito
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform/cognito
        run: terraform plan -input=false -var-file=ci.auto.tfvars

      - name: Import Cognito resources into Terraform state
        working-directory: terraform/cognito
        run: |
          if [ -n "$USER_POOL_ID" ] && [ -n "$CLIENT_ID" ] \
            && [[ "$USER_POOL_ID" != *"Warning: No outputs found"* ]] && [[ "$USER_POOL_ID" != "None" ]] \
            && [[ "$CLIENT_ID" != *"Warning: No outputs found"* ]] && [[ "$CLIENT_ID" != "None" ]]; then
            terraform import aws_cognito_user_pool.main "$USER_POOL_ID" || true
            terraform import aws_cognito_user_pool_client.main "$USER_POOL_ID/$CLIENT_ID" || true
          else
            echo "Skipping user pool and client import: USER_POOL_ID or CLIENT_ID is empty or invalid ($USER_POOL_ID, $CLIENT_ID)"
          fi
          if [ -n "$USER_POOL_ID" ]; then
            terraform import aws_cognito_identity_provider.google "$USER_POOL_ID":Google || true
          else
            echo "Skipping identity provider import: USER_POOL_ID is empty or invalid ($USER_POOL_ID)"
          fi

      - name: Terraform Apply (Upsert Mode)
        working-directory: terraform/cognito
        run: |
          echo "USER_POOL_ID: $USER_POOL_ID"
          echo "CLIENT_ID: $CLIENT_ID"
          cat ci.auto.tfvars
          # Always run apply, regardless of whether IDs are present (fire-and-forget)
          terraform apply -input=false -auto-approve -var-file=ci.auto.tfvars


      - name: Upload Cognito IDs and admin password to S3
        working-directory: terraform/cognito
        run: |
          # Save Terraform outputs to files and upload to S3
          terraform output -raw user_pool_id 2>/dev/null | xargs > $COGNITO_POOL_ID_FILE
          terraform output -raw user_pool_client_id 2>/dev/null | xargs > $COGNITO_CLIENT_ID_FILE

          aws s3 cp $COGNITO_POOL_ID_FILE s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_POOL_ID_FILE
          aws s3 cp $COGNITO_CLIENT_ID_FILE s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_CLIENT_ID_FILE

      - name: Re-fetch Cognito outputs after apply
        working-directory: terraform/cognito
        run: |
          # Re-read the latest Cognito output files and export to env
          if [ -f "$COGNITO_POOL_ID_FILE" ]; then
            export USER_POOL_ID=$(cat "$COGNITO_POOL_ID_FILE" | tr -d '\n')
            echo "USER_POOL_ID=$USER_POOL_ID" >> $GITHUB_ENV
          fi
          if [ -f "$COGNITO_CLIENT_ID_FILE" ]; then
            export CLIENT_ID=$(cat "$COGNITO_CLIENT_ID_FILE" | tr -d '\n')
            echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          fi

      - name: Export Cognito User Pool ARN
        working-directory: terraform/cognito
        run: |
          # Export Cognito User Pool ARN to file and upload to S3
          terraform output -raw user_pool_arn 2>/dev/null | xargs > COGNITO_POOL_ARN.txt
          aws s3 cp COGNITO_POOL_ARN.txt s3://$SHARED_BUILD_DATA_BUCKET/COGNITO_POOL_ARN.txt

