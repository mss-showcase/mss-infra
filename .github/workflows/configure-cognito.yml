name: Configure Cognito User Pool

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  SHARED_BUILD_DATA_BUCKET: ${{ vars.SHARED_BUILD_DATA_BUCKET }}
  COGNITO_POOL_ID_FILE: ${{ vars.COGNITO_POOL_ID_FILE }}
  COGNITO_CLIENT_ID_FILE: ${{ vars.COGNITO_CLIENT_ID_FILE }}
  COGNITO_ADMIN_USERNAME: ${{ vars.COGNITO_ADMIN_USERNAME }}
  COGNITO_ADMIN_PASSWORD: ${{ secrets.COGNITO_ADMIN_PASSWORD }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

jobs:
  configure-cognito:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Init Terraform
        working-directory: terraform/cognito
        run: terraform init -input=false -upgrade

      - name: Write Terraform variable file
        working-directory: terraform/cognito
        run: |
          cat <<EOF > ci.auto.tfvars
          aws_region             = "${AWS_REGION}"
          google_client_id       = "${GOOGLE_CLIENT_ID}"
          google_client_secret   = "${GOOGLE_CLIENT_SECRET}"
          cloudfront_domain_name = "${CLOUDFRONT_DOMAIN_NAME}"
          EOF
          terraform fmt ci.auto.tfvars

      - name: Terraform Format Check
        working-directory: terraform/cognito
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: terraform/cognito
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform/cognito
        run: terraform plan -input=false -var-file=ci.auto.tfvars

      - name: Get Cognito User Pool and Client IDs
        id: cognito_ids
        run: |
          # Try to fetch IDs from S3 files first
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_DOMAIN_NAME.txt CLOUDFRONT_DOMAIN_NAME.txt --region $AWS_REGION || true
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_POOL_ID_FILE $COGNITO_POOL_ID_FILE --region $AWS_REGION || true
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_CLIENT_ID_FILE $COGNITO_CLIENT_ID_FILE --region $AWS_REGION || true
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/COGNITO_GOOGLE_PROVIDER_NAME.txt COGNITO_GOOGLE_PROVIDER_NAME.txt --region $AWS_REGION || true
          

          if [ -f "$COGNITO_POOL_ID_FILE" ]; then
            CLOUDFRONT_DOMAIN_NAME=$(tr -d '\n' < CLOUDFRONT_DOMAIN_NAME.txt)
            echo "Found CLOUDFRONT_DOMAIN_NAME in S3 file: $CLOUDFRONT_DOMAIN_NAME"
          fi

          if [ -f "$COGNITO_POOL_ID_FILE" ]; then
            USER_POOL_ID=$(tr -d '\n' < $COGNITO_POOL_ID_FILE)
            echo "Found USER_POOL_ID in S3 file: $USER_POOL_ID"
          fi

          if [ -f "$COGNITO_CLIENT_ID_FILE" ]; then
            CLIENT_ID=$(tr -d '\n' < $COGNITO_CLIENT_ID_FILE)
            echo "Found CLIENT_ID in S3 file: $CLIENT_ID"
          fi

          if [ -f COGNITO_GOOGLE_PROVIDER_NAME.txt ]; then
            GOOGLE_PROVIDER_NAME=$(tr -d '\n' < COGNITO_GOOGLE_PROVIDER_NAME.txt)
            echo "Found GOOGLE_PROVIDER_NAME in S3 file: $GOOGLE_PROVIDER_NAME"
          fi

          # If not found, try AWS CLI

          if [ -z "$USER_POOL_ID" ] || [ "$USER_POOL_ID" = "None" ]; then
            USER_POOL_ID=$(aws cognito-idp list-user-pools --max-results 60 --region "$AWS_REGION" --query "UserPools[?Name=='mss-user-pool'].Id" --output text | cut -f1)
          fi

          if [ -z "$CLIENT_ID" ] || [ "$CLIENT_ID" = "None" ]; then
            if [ -n "$USER_POOL_ID" ]; then
              CLIENT_ID=$(aws cognito-idp list-user-pool-clients --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION" --query "UserPoolClients[0].ClientId" --output text 2>/dev/null || echo "")
            fi
          fi

          if [ -z "$GOOGLE_PROVIDER_NAME" ] || [ "$GOOGLE_PROVIDER_NAME" = "None" ]; then
            if [ -n "$USER_POOL_ID" ]; then
              GOOGLE_PROVIDER_NAME=$(aws cognito-idp list-identity-providers --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION" --query "Providers[?ProviderType=='Google'].ProviderName" --output text 2>/dev/null || echo "")
            fi
          fi

          # If still not found, try Terraform outputs

          if [ -z "$USER_POOL_ID" ] || [ "$USER_POOL_ID" = "None" ]; then
            cd terraform/cognito
            USER_POOL_ID=$(terraform output -raw user_pool_id 2>/dev/null || echo "")
            cd ../..
          fi

          if [ -z "$CLIENT_ID" ] || [ "$CLIENT_ID" = "None" ]; then
            cd terraform/cognito
            CLIENT_ID=$(terraform output -raw user_pool_client_id 2>/dev/null || echo "")
            cd ../..
          fi

          if [ -z "$GOOGLE_PROVIDER_NAME" ] || [ "$GOOGLE_PROVIDER_NAME" = "None" ]; then
            cd terraform/cognito
            GOOGLE_PROVIDER_NAME=$(terraform output -raw google_identity_provider_name 2>/dev/null || echo "")
            cd ../..
          fi

          echo "USER_POOL_ID=$USER_POOL_ID" >> $GITHUB_ENV
          echo "$USER_POOL_ID" > $COGNITO_POOL_ID_FILE

          echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "$CLIENT_ID" > $COGNITO_CLIENT_ID_FILE

          echo "GOOGLE_PROVIDER_NAME=$GOOGLE_PROVIDER_NAME" >> $GITHUB_ENV
          echo "$GOOGLE_PROVIDER_NAME" > COGNITO_GOOGLE_PROVIDER_NAME.txt
 
      - name: Import Cognito resources into Terraform state
        working-directory: terraform/cognito
        run: |
          terraform import aws_cognito_user_pool.main $USER_POOL_ID || true
          terraform import aws_cognito_user_pool_client.main $CLIENT_ID || true
          terraform import aws_cognito_identity_provider.google "$USER_POOL_ID":$GOOGLE_PROVIDER_NAME || true

      - name: Terraform Apply
        working-directory: terraform/cognito
        run: terraform apply -input=false -auto-approve -var-file=ci.auto.tfvars

      - name: Create admin user and groups
        run: |
          # Validate and construct admin email
          ADMIN_EMAIL="$COGNITO_ADMIN_USERNAME"
          ADMIN_USERNAME="$COGNITO_ADMIN_USERNAME"
          
          echo "Admin username: $ADMIN_USERNAME"
          echo "Admin email: $ADMIN_EMAIL"
          
          # Create admin user if not exists
          aws cognito-idp admin-get-user --user-pool-id "$USER_POOL_ID" --username "$ADMIN_USERNAME" --region "$AWS_REGION" || \
          aws cognito-idp admin-create-user \
            --user-pool-id "$USER_POOL_ID" \
            --username "$ADMIN_USERNAME" \
            --user-attributes Name=email,Value="$ADMIN_EMAIL" \
            --message-action SUPPRESS \
            --region "$AWS_REGION"

          # Set admin password
          aws cognito-idp admin-set-user-password \
            --user-pool-id "$USER_POOL_ID" \
            --username "$ADMIN_USERNAME" \
            --password "$COGNITO_ADMIN_PASSWORD" \
            --permanent \
            --region "$AWS_REGION"

          # Create groups if not exist
          aws cognito-idp get-group --group-name admin --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION" || \
          aws cognito-idp create-group --group-name admin --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION"
          aws cognito-idp get-group --group-name user --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION" || \
          aws cognito-idp create-group --group-name user --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION"

          # Add admin user to admin group
          aws cognito-idp admin-add-user-to-group \
            --user-pool-id "$USER_POOL_ID" \
            --username "$ADMIN_USERNAME" \
            --group-name admin \
            --region "$AWS_REGION"

      - name: Upload Cognito IDs and admin password to S3
        run: |
          aws s3 cp $COGNITO_POOL_ID_FILE s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_POOL_ID_FILE
          aws s3 cp $COGNITO_CLIENT_ID_FILE s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_CLIENT_ID_FILE
          aws s3 cp COGNITO_GOOGLE_PROVIDER_NAME.txt s3://$SHARED_BUILD_DATA_BUCKET/COGNITO_GOOGLE_PROVIDER_NAME.txt
