name: Configure Cognito User Pool

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  SHARED_BUILD_DATA_BUCKET: ${{ vars.SHARED_BUILD_DATA_BUCKET }}
  COGNITO_POOL_ID_FILE: ${{ vars.COGNITO_POOL_ID_FILE }}
  COGNITO_CLIENT_ID_FILE: ${{ vars.COGNITO_CLIENT_ID_FILE }}
  COGNITO_ADMIN_USERNAME: ${{ vars.COGNITO_ADMIN_USERNAME }}
  COGNITO_ADMIN_PASSWORD: ${{ secrets.COGNITO_ADMIN_PASSWORD }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

jobs:
  configure-cognito:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Init Terraform
        working-directory: terraform/cognito
        run: terraform init -input=false -upgrade

      - name: Download CloudFront domain name from S3
        run: |
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_DOMAIN_NAME.txt CLOUDFRONT_DOMAIN_NAME.txt --region $AWS_REGION
          echo "CLOUDFRONT_DOMAIN_NAME=$(tr -d '\n' < CLOUDFRONT_DOMAIN_NAME.txt)" >> $GITHUB_ENV

      - name: Write Terraform variable file
        working-directory: terraform/cognito
        run: |
          cat <<EOF > ci.auto.tfvars
          aws_region             = "${AWS_REGION}"
          google_client_id       = "${GOOGLE_CLIENT_ID}"
          google_client_secret   = "${GOOGLE_CLIENT_SECRET}"
          cloudfront_domain_name = "${CLOUDFRONT_DOMAIN_NAME}"
          EOF
          terraform fmt ci.auto.tfvars

      - name: Terraform Format Check
        working-directory: terraform/cognito
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: terraform/cognito
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform/cognito
        run: terraform plan -input=false -var-file=ci.auto.tfvars

      - name: Get Cognito User Pool and Client IDs
        id: cognito_ids
        run: |
          set -euo pipefail
          # Helper: Remove file if empty or contains only null bytes
          clean_file() {
            local f="$1"
            if [ -f "$f" ]; then
              # Remove if empty or only null bytes
              if [ ! -s "$f" ] || grep -qP "^\x00*$" "$f"; then rm -f "$f"; fi
            fi
          }

          # Try to fetch IDs from S3 files first
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_POOL_ID_FILE $COGNITO_POOL_ID_FILE --region $AWS_REGION || true
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_CLIENT_ID_FILE $COGNITO_CLIENT_ID_FILE --region $AWS_REGION || true
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/COGNITO_GOOGLE_PROVIDER_NAME.txt COGNITO_GOOGLE_PROVIDER_NAME.txt --region $AWS_REGION || true

          clean_file "$COGNITO_POOL_ID_FILE"
          clean_file "$COGNITO_CLIENT_ID_FILE"
          clean_file "COGNITO_GOOGLE_PROVIDER_NAME.txt"

          USER_POOL_ID=""
          CLIENT_ID=""
          GOOGLE_PROVIDER_NAME=""



          # Helper: Validate and echo a variable from a file
          get_valid_var_from_file() {
            # $1 = file, $2 = varname
            local file="$1"
            local __resultvar="$2"
            local val=""
            if [ -s "$file" ]; then
              val=$(tr -d '\0\n' < "$file" | xargs)
              if [[ -z "$val" || "$val" == "None" || "$val" == *"Warning: No outputs found"* ]]; then
                val=""
              else
                echo "Found $2 in S3 file: $val"
              fi
            fi
            eval "$__resultvar=\"$val\""
          }

          get_valid_var_from_file "$COGNITO_POOL_ID_FILE" USER_POOL_ID
          get_valid_var_from_file "$COGNITO_CLIENT_ID_FILE" CLIENT_ID
          get_valid_var_from_file COGNITO_GOOGLE_PROVIDER_NAME.txt GOOGLE_PROVIDER_NAME

          # If not found, try AWS CLI
          echo "Trying to fetch Cognito IDs from AWS CLI..."
          if [ -z "$USER_POOL_ID" ] || [ "$USER_POOL_ID" = "None" ]; then
            USER_POOL_ID=$(aws cognito-idp list-user-pools --max-results 60 --region "$AWS_REGION" --query "UserPools[?Name=='mss-user-pool'].Id" --output text | cut -f1 | xargs)
          fi

          echo trying to fetch CLIENT_ID with USER_POOL_ID from AWS CLI...
          if [ -z "$CLIENT_ID" ] || [ "$CLIENT_ID" = "None" ]; then
            if [ -n "$USER_POOL_ID" ]; then
              CLIENT_ID=$(aws cognito-idp list-user-pool-clients --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION" --query "UserPoolClients[0].ClientId" --output text 2>/dev/null | xargs || echo "")
            fi
          fi

          echo trying to fetch GOOGLE_PROVIDER_NAME with USER_POOL_ID from AWS CLI...
          if [ -z "$GOOGLE_PROVIDER_NAME" ] || [ "$GOOGLE_PROVIDER_NAME" = "None" ]; then
            if [ -n "$USER_POOL_ID" ]; then
              GOOGLE_PROVIDER_NAME=$(aws cognito-idp list-identity-providers --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION" --query "Providers[?ProviderType=='Google'].ProviderName" --output text 2>/dev/null | xargs || echo "")
            fi
          fi

          # If still not found, try Terraform outputs

          echo "Trying to fetch USER_POOL_ID from Terraform outputs..."
          if [ -z "$USER_POOL_ID" ] || [ "$USER_POOL_ID" = "None" ] || [[ "$USER_POOL_ID" == *"Warning: No outputs found"* ]]; then
            cd terraform/cognito
            USER_POOL_ID=$(terraform output -raw user_pool_id 2>/dev/null | xargs || echo "")
            cd ../..
          fi

          echo trying to fetch CLIENT_ID from Terraform outputs...
          if [ -z "$CLIENT_ID" ] || [ "$CLIENT_ID" = "None" ] || [[ "$CLIENT_ID" == *"Warning: No outputs found"* ]]; then
            cd terraform/cognito
            CLIENT_ID=$(terraform output -raw user_pool_client_id 2>/dev/null | xargs || echo "")
            cd ../..
          fi

          echo trying to fetch GOOGLE_PROVIDER_NAME from Terraform outputs...
          if [ -z "$GOOGLE_PROVIDER_NAME" ] || [ "$GOOGLE_PROVIDER_NAME" = "None" ] || [[ "$GOOGLE_PROVIDER_NAME" == *"Warning: No outputs found"* ]]; then
            cd terraform/cognito
            GOOGLE_PROVIDER_NAME=$(terraform output -raw google_identity_provider_name 2>/dev/null | xargs || echo "")
            cd ../..
          fi

          # Only write valid, non-empty, non-warning values
          echo "saving to env files..."
          if [ -n "$USER_POOL_ID" ] && [[ "$USER_POOL_ID" != *"Warning: No outputs found"* ]] && [[ "$USER_POOL_ID" != "None" ]]; then
            echo "USER_POOL_ID=$USER_POOL_ID" >> $GITHUB_ENV
            echo "$USER_POOL_ID" > $COGNITO_POOL_ID_FILE
          fi

          if [ -n "$CLIENT_ID" ] && [[ "$CLIENT_ID" != *"Warning: No outputs found"* ]] && [[ "$CLIENT_ID" != "None" ]]; then
            echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
            echo "$CLIENT_ID" > $COGNITO_CLIENT_ID_FILE
          fi

          if [ -n "$GOOGLE_PROVIDER_NAME" ] && [[ "$GOOGLE_PROVIDER_NAME" != *"Warning: No outputs found"* ]] && [[ "$GOOGLE_PROVIDER_NAME" != "None" ]]; then
            echo "GOOGLE_PROVIDER_NAME=$GOOGLE_PROVIDER_NAME" >> $GITHUB_ENV
            echo "$GOOGLE_PROVIDER_NAME" > COGNITO_GOOGLE_PROVIDER_NAME.txt
          fi
 
      - name: Import Cognito resources into Terraform state
        working-directory: terraform/cognito
        run: |
          if [ -n "$USER_POOL_ID" ] && [[ "$USER_POOL_ID" != *"Warning: No outputs found"* ]] && [[ "$USER_POOL_ID" != "None" ]]; then
            terraform import aws_cognito_user_pool.main "$USER_POOL_ID" || true
          else
            echo "Skipping user pool import: USER_POOL_ID is empty or invalid ($USER_POOL_ID)"
          fi
          if [ -n "$CLIENT_ID" ] && [[ "$CLIENT_ID" != *"Warning: No outputs found"* ]] && [[ "$CLIENT_ID" != "None" ]]; then
            terraform import aws_cognito_user_pool_client.main "$CLIENT_ID" || true
          else
            echo "Skipping user pool client import: CLIENT_ID is empty or invalid ($CLIENT_ID)"
          fi
          if [ -n "$USER_POOL_ID" ] && [ -n "$GOOGLE_PROVIDER_NAME" ] && [[ "$USER_POOL_ID" != *"Warning: No outputs found"* ]] && [[ "$USER_POOL_ID" != "None" ]] && [[ "$GOOGLE_PROVIDER_NAME" != *"Warning: No outputs found"* ]] && [[ "$GOOGLE_PROVIDER_NAME" != "None" ]]; then
            terraform import aws_cognito_identity_provider.google "$USER_POOL_ID":$GOOGLE_PROVIDER_NAME || true
          else
            echo "Skipping identity provider import: USER_POOL_ID or GOOGLE_PROVIDER_NAME is empty or invalid ($USER_POOL_ID, $GOOGLE_PROVIDER_NAME)"
          fi


      - name: Terraform Apply
        working-directory: terraform/cognito
        run: terraform apply -input=false -auto-approve -var-file=ci.auto.tfvars

      - name: Refresh Cognito User Pool and Client IDs after apply
        id: cognito_ids_post_apply
        run: |
          set -euo pipefail
          # Helper: Remove file if empty or contains only null bytes
          clean_file() {
            local f="$1"
            if [ -f "$f" ]; then
              # Remove if empty or only null bytes
              if [ ! -s "$f" ] || grep -qP "^\x00*$" "$f"; then rm -f "$f"; fi
            fi
          }

          # Try to fetch IDs from S3 files first
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_POOL_ID_FILE $COGNITO_POOL_ID_FILE --region $AWS_REGION || true
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_CLIENT_ID_FILE $COGNITO_CLIENT_ID_FILE --region $AWS_REGION || true
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/COGNITO_GOOGLE_PROVIDER_NAME.txt COGNITO_GOOGLE_PROVIDER_NAME.txt --region $AWS_REGION || true

          clean_file "$COGNITO_POOL_ID_FILE"
          clean_file "$COGNITO_CLIENT_ID_FILE"
          clean_file "COGNITO_GOOGLE_PROVIDER_NAME.txt"

          USER_POOL_ID=""
          CLIENT_ID=""
          GOOGLE_PROVIDER_NAME=""

          if [ -s "$COGNITO_POOL_ID_FILE" ]; then
            USER_POOL_ID=$(tr -d '\0\n' < $COGNITO_POOL_ID_FILE | xargs)
            if [ -n "$USER_POOL_ID" ]; then
              echo "Found USER_POOL_ID in S3 file: $USER_POOL_ID"
            fi
          fi

          if [ -s "$COGNITO_CLIENT_ID_FILE" ]; then
            CLIENT_ID=$(tr -d '\0\n' < $COGNITO_CLIENT_ID_FILE | xargs)
            if [ -n "$CLIENT_ID" ]; then
              echo "Found CLIENT_ID in S3 file: $CLIENT_ID"
            fi
          fi

          if [ -s COGNITO_GOOGLE_PROVIDER_NAME.txt ]; then
            GOOGLE_PROVIDER_NAME=$(tr -d '\0\n' < COGNITO_GOOGLE_PROVIDER_NAME.txt | xargs)
            if [ -n "$GOOGLE_PROVIDER_NAME" ]; then
              echo "Found GOOGLE_PROVIDER_NAME in S3 file: $GOOGLE_PROVIDER_NAME"
            fi
          fi

          # If not found, try AWS CLI
          echo "Trying to fetch Cognito IDs from AWS CLI..."
          if [ -z "$USER_POOL_ID" ] || [ "$USER_POOL_ID" = "None" ]; then
            USER_POOL_ID=$(aws cognito-idp list-user-pools --max-results 60 --region "$AWS_REGION" --query "UserPools[?Name=='mss-user-pool'].Id" --output text | cut -f1 | xargs)
          fi

          echo trying to fetch CLIENT_ID with USER_POOL_ID from AWS CLI...
          if [ -z "$CLIENT_ID" ] || [ "$CLIENT_ID" = "None" ]; then
            if [ -n "$USER_POOL_ID" ]; then
              CLIENT_ID=$(aws cognito-idp list-user-pool-clients --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION" --query "UserPoolClients[0].ClientId" --output text 2>/dev/null | xargs || echo "")
            fi
          fi

          echo trying to fetch GOOGLE_PROVIDER_NAME with USER_POOL_ID from AWS CLI...
          if [ -z "$GOOGLE_PROVIDER_NAME" ] || [ "$GOOGLE_PROVIDER_NAME" = "None" ]; then
            if [ -n "$USER_POOL_ID" ]; then
              GOOGLE_PROVIDER_NAME=$(aws cognito-idp list-identity-providers --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION" --query "Providers[?ProviderType=='Google'].ProviderName" --output text 2>/dev/null | xargs || echo "")
            fi
          fi

          # If still not found, try Terraform outputs

          echo "Trying to fetch USER_POOL_ID from Terraform outputs..."
          if [ -z "$USER_POOL_ID" ] || [ "$USER_POOL_ID" = "None" ] || [[ "$USER_POOL_ID" == *"Warning: No outputs found"* ]]; then
            cd terraform/cognito
            USER_POOL_ID=$(terraform output -raw user_pool_id 2>/dev/null | xargs || echo "")
            cd ../..
          fi

          echo trying to fetch CLIENT_ID from Terraform outputs...
          if [ -z "$CLIENT_ID" ] || [ "$CLIENT_ID" = "None" ] || [[ "$CLIENT_ID" == *"Warning: No outputs found"* ]]; then
            cd terraform/cognito
            CLIENT_ID=$(terraform output -raw user_pool_client_id 2>/dev/null | xargs || echo "")
            cd ../..
          fi

          echo trying to fetch GOOGLE_PROVIDER_NAME from Terraform outputs...
          if [ -z "$GOOGLE_PROVIDER_NAME" ] || [ "$GOOGLE_PROVIDER_NAME" = "None" ] || [[ "$GOOGLE_PROVIDER_NAME" == *"Warning: No outputs found"* ]]; then
            cd terraform/cognito
            GOOGLE_PROVIDER_NAME=$(terraform output -raw google_identity_provider_name 2>/dev/null | xargs || echo "")
            cd ../..
          fi

          # Only write valid, non-empty, non-warning values
          echo "saving to env files..."
          if [ -n "$USER_POOL_ID" ] && [[ "$USER_POOL_ID" != *"Warning: No outputs found"* ]] && [[ "$USER_POOL_ID" != "None" ]]; then
            echo "USER_POOL_ID=$USER_POOL_ID" >> $GITHUB_ENV
            echo "$USER_POOL_ID" > $COGNITO_POOL_ID_FILE
          fi

          if [ -n "$CLIENT_ID" ] && [[ "$CLIENT_ID" != *"Warning: No outputs found"* ]] && [[ "$CLIENT_ID" != "None" ]]; then
            echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
            echo "$CLIENT_ID" > $COGNITO_CLIENT_ID_FILE
          fi

          if [ -n "$GOOGLE_PROVIDER_NAME" ] && [[ "$GOOGLE_PROVIDER_NAME" != *"Warning: No outputs found"* ]] && [[ "$GOOGLE_PROVIDER_NAME" != "None" ]]; then
            echo "GOOGLE_PROVIDER_NAME=$GOOGLE_PROVIDER_NAME" >> $GITHUB_ENV
            echo "$GOOGLE_PROVIDER_NAME" > COGNITO_GOOGLE_PROVIDER_NAME.txt
          fi

      - name: Upload Cognito IDs and admin password to S3
        run: |
          aws s3 cp $COGNITO_POOL_ID_FILE s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_POOL_ID_FILE
          aws s3 cp $COGNITO_CLIENT_ID_FILE s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_CLIENT_ID_FILE
          aws s3 cp COGNITO_GOOGLE_PROVIDER_NAME.txt s3://$SHARED_BUILD_DATA_BUCKET/COGNITO_GOOGLE_PROVIDER_NAME.txt

      - name: Create admin user and groups
        run: |
          # Validate and construct admin email
          ADMIN_EMAIL="$COGNITO_ADMIN_USERNAME"
          ADMIN_USERNAME="$COGNITO_ADMIN_USERNAME"

          echo "Admin username: $ADMIN_USERNAME"
          echo "Admin email: $ADMIN_EMAIL"

          # Only proceed if USER_POOL_ID is valid
          if [ -n "$USER_POOL_ID" ] && [[ "$USER_POOL_ID" != *"Warning: No outputs found"* ]] && [[ "$USER_POOL_ID" != "None" ]]; then
            # Create admin user if not exists
            aws cognito-idp admin-get-user --user-pool-id "$USER_POOL_ID" --username "$ADMIN_USERNAME" --region "$AWS_REGION" || \
            aws cognito-idp admin-create-user \
              --user-pool-id "$USER_POOL_ID" \
              --username "$ADMIN_USERNAME" \
              --user-attributes Name=email,Value="$ADMIN_EMAIL" \
              --message-action SUPPRESS \
              --region "$AWS_REGION"

            # Set admin password
            aws cognito-idp admin-set-user-password \
              --user-pool-id "$USER_POOL_ID" \
              --username "$ADMIN_USERNAME" \
              --password "$COGNITO_ADMIN_PASSWORD" \
              --permanent \
              --region "$AWS_REGION"

            # Create groups if not exist
            aws cognito-idp get-group --group-name admin --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION" || \
            aws cognito-idp create-group --group-name admin --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION"
            aws cognito-idp get-group --group-name user --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION" || \
            aws cognito-idp create-group --group-name user --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION"

            # Add admin user to admin group
            aws cognito-idp admin-add-user-to-group \
              --user-pool-id "$USER_POOL_ID" \
              --username "$ADMIN_USERNAME" \
              --group-name admin \
              --region "$AWS_REGION"
          else
            echo "Skipping admin user/group creation: USER_POOL_ID is empty or invalid ($USER_POOL_ID)"
          fi
