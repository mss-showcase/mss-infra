name: Configure Cognito User Pool

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  SHARED_BUILD_DATA_BUCKET: ${{ vars.SHARED_BUILD_DATA_BUCKET }}
  COGNITO_POOL_ID_FILE: ${{ vars.COGNITO_POOL_ID_FILE }}
  COGNITO_CLIENT_ID_FILE: ${{ vars.COGNITO_CLIENT_ID_FILE }}
  COGNITO_ADMIN_USERNAME: ${{ vars.COGNITO_ADMIN_USERNAME }}
  COGNITO_ADMIN_PASSWORD: ${{ secrets.COGNITO_ADMIN_PASSWORD }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

jobs:
  configure-cognito:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Init Terraform
        working-directory: terraform/cognito
        run: terraform init -input=false -upgrade

      - name: Download CloudFront domain name from S3
        run: |
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_DOMAIN_NAME.txt CLOUDFRONT_DOMAIN_NAME.txt --region $AWS_REGION
          echo "CLOUDFRONT_DOMAIN_NAME=$(tr -d '\n' < CLOUDFRONT_DOMAIN_NAME.txt)" >> $GITHUB_ENV

      - name: Get Cognito User Pool and Client IDs
        id: cognito_ids
        run: |
          # Try to fetch IDs from S3 files first
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_POOL_ID_FILE $COGNITO_POOL_ID_FILE --region $AWS_REGION || true
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_CLIENT_ID_FILE $COGNITO_CLIENT_ID_FILE --region $AWS_REGION || true
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/COGNITO_GOOGLE_PROVIDER_NAME.txt COGNITO_GOOGLE_PROVIDER_NAME.txt --region $AWS_REGION || true

          # Only write valid, non-empty, non-warning values
          if [ -f COGNITO_POOL_ID_FILE.txt ]; then
            export USER_POOL_ID=$(cat COGNITO_POOL_ID_FILE.txt | tr -d '\n')
            echo "USER_POOL_ID=$USER_POOL_ID" >> $GITHUB_ENV
            echo "USER_POOL_ID=$USER_POOL_ID"
          fi
          if [ -f $COGNITO_CLIENT_ID_FILE ]; then
            export CLIENT_ID=$(cat $COGNITO_CLIENT_ID_FILE | tr -d '\n')
            echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
            echo "CLIENT_ID=$CLIENT_ID"
          fi
          if [ -f COGNITO_GOOGLE_PROVIDER_NAME.txt ]; then
            export GOOGLE_PROVIDER_NAME=$(tr -d '\n' < COGNITO_GOOGLE_PROVIDER_NAME.txt)
            echo "GOOGLE_PROVIDER_NAME=$GOOGLE_PROVIDER_NAME" >> $GITHUB_ENV
            echo "GOOGLE_PROVIDER_NAME=$GOOGLE_PROVIDER_NAME"
          fi

      - name: Write Terraform variable file
        working-directory: terraform/cognito
        run: |
          cat <<EOF > ci.auto.tfvars
          aws_region               = "${AWS_REGION}"
          google_client_id         = "${GOOGLE_CLIENT_ID}"
          google_client_secret     = "${GOOGLE_CLIENT_SECRET}"
          cloudfront_domain_name   = "${CLOUDFRONT_DOMAIN_NAME}"
          cognito_user_pool_id     = "${USER_POOL_ID}"
          cognito_user_pool_client_id = "${CLIENT_ID}"
          EOF
          terraform fmt ci.auto.tfvars

      - name: Terraform Format Check
        working-directory: terraform/cognito
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: terraform/cognito
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform/cognito
        run: terraform plan -input=false -var-file=ci.auto.tfvars

      - name: Import Cognito resources into Terraform state
        working-directory: terraform/cognito
        run: |
          if [ -n "$USER_POOL_ID" ] && [ -n "$CLIENT_ID" ] \
            && [[ "$USER_POOL_ID" != *"Warning: No outputs found"* ]] && [[ "$USER_POOL_ID" != "None" ]] \
            && [[ "$CLIENT_ID" != *"Warning: No outputs found"* ]] && [[ "$CLIENT_ID" != "None" ]]; then
            terraform import aws_cognito_user_pool.main "$USER_POOL_ID" || true
            terraform import aws_cognito_user_pool_client.main "$USER_POOL_ID/$CLIENT_ID" || true
          else
            echo "Skipping user pool and client import: USER_POOL_ID or CLIENT_ID is empty or invalid ($USER_POOL_ID, $CLIENT_ID)"
          fi
          if [ -n "$USER_POOL_ID" ] && [ -n "$GOOGLE_PROVIDER_NAME" ] && [[ "$USER_POOL_ID" != *"Warning: No outputs found"* ]] && [[ "$USER_POOL_ID" != "None" ]] && [[ "$GOOGLE_PROVIDER_NAME" != *"Warning: No outputs found"* ]] && [[ "$GOOGLE_PROVIDER_NAME" != "None" ]]; then
            terraform import aws_cognito_identity_provider.google "$USER_POOL_ID":$GOOGLE_PROVIDER_NAME || true
          else
            echo "Skipping identity provider import: USER_POOL_ID or GOOGLE_PROVIDER_NAME is empty or invalid ($USER_POOL_ID, $GOOGLE_PROVIDER_NAME)"
          fi

      - name: Terraform Apply
        working-directory: terraform/cognito
        run: terraform apply -input=false -auto-approve -var-file=ci.auto.tfvars


      - name: Upload Cognito IDs and admin password to S3
        run: |
          # Save Terraform outputs to files and upload to S3
          cd terraform/cognito
          terraform output -raw user_pool_id 2>/dev/null | xargs > ../../$COGNITO_POOL_ID_FILE
          terraform output -raw user_pool_client_id 2>/dev/null | xargs > ../../$COGNITO_CLIENT_ID_FILE
          terraform output -raw google_identity_provider_name 2>/dev/null | xargs > ../../COGNITO_GOOGLE_PROVIDER_NAME.txt
          # If the file is empty, default to "Google"
          if [ ! -s ../../COGNITO_GOOGLE_PROVIDER_NAME.txt ]; then
            echo "Google" > ../../COGNITO_GOOGLE_PROVIDER_NAME.txt
          fi
          cd ../..

          aws s3 cp $COGNITO_POOL_ID_FILE s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_POOL_ID_FILE
          aws s3 cp $COGNITO_CLIENT_ID_FILE s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_CLIENT_ID_FILE
          aws s3 cp COGNITO_GOOGLE_PROVIDER_NAME.txt s3://$SHARED_BUILD_DATA_BUCKET/COGNITO_GOOGLE_PROVIDER_NAME.txt

      - name: Re-fetch Cognito outputs after apply
        run: |
          # Re-read the latest Cognito output files and export to env
          if [ -f "$COGNITO_POOL_ID_FILE" ]; then
            export USER_POOL_ID=$(cat "$COGNITO_POOL_ID_FILE" | tr -d '\n')
            echo "USER_POOL_ID=$USER_POOL_ID" >> $GITHUB_ENV
          fi
          if [ -f "$COGNITO_CLIENT_ID_FILE" ]; then
            export CLIENT_ID=$(cat "$COGNITO_CLIENT_ID_FILE" | tr -d '\n')
            echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          fi
          if [ -f "COGNITO_GOOGLE_PROVIDER_NAME.txt" ]; then
            export GOOGLE_PROVIDER_NAME=$(tr -d '\n' < COGNITO_GOOGLE_PROVIDER_NAME.txt)
            echo "GOOGLE_PROVIDER_NAME=$GOOGLE_PROVIDER_NAME" >> $GITHUB_ENV
          fi

      - name: Create admin user and groups
        run: |
          # Helper: Validate env variable value
          validate_env_var() {
            # $1 = varname
            local val="${!1}"
            if [[ -z "$val" || "$val" == "None" || "$val" == *"Warning: No outputs found"* ]]; then
              eval "$1=''"
            fi
          }

          # Validate and construct admin email
          ADMIN_EMAIL="$COGNITO_ADMIN_USERNAME"
          ADMIN_USERNAME="$COGNITO_ADMIN_USERNAME"

          echo "Admin username: $ADMIN_USERNAME"
          echo "Admin email: $ADMIN_EMAIL"

          # Sanitize env vars before use
          echo "User pool ID: $USER_POOL_ID before validation"
          validate_env_var USER_POOL_ID
          echo "User pool ID: $USER_POOL_ID after validation"
          echo "Client ID : $CLIENT_ID before validation"
          validate_env_var CLIENT_ID
          echo "Client ID : $CLIENT_ID after validation"
          echo "Google provider name: $GOOGLE_PROVIDER_NAME before validation"
          validate_env_var GOOGLE_PROVIDER_NAME
          echo "Google provider name: $GOOGLE_PROVIDER_NAME after validation"

          # Only proceed if USER_POOL_ID is valid
          if [ -n "$USER_POOL_ID" ]; then
            # Create admin user if not exists
            aws cognito-idp admin-get-user --user-pool-id "$USER_POOL_ID" --username "$ADMIN_USERNAME" --region "$AWS_REGION" || \
            aws cognito-idp admin-create-user \
              --user-pool-id "$USER_POOL_ID" \
              --username "$ADMIN_USERNAME" \
              --user-attributes Name=email,Value="$ADMIN_EMAIL" \
              --message-action SUPPRESS \
              --region "$AWS_REGION"

            # Set admin password
            aws cognito-idp admin-set-user-password \
              --user-pool-id "$USER_POOL_ID" \
              --username "$ADMIN_USERNAME" \
              --password "$COGNITO_ADMIN_PASSWORD" \
              --permanent \
              --region "$AWS_REGION"

            # Create groups if not exist
            aws cognito-idp get-group --group-name admin --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION" || \
            aws cognito-idp create-group --group-name admin --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION"
            aws cognito-idp get-group --group-name user --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION" || \
            aws cognito-idp create-group --group-name user --user-pool-id "$USER_POOL_ID" --region "$AWS_REGION"

            # Add admin user to admin group
            aws cognito-idp admin-add-user-to-group \
              --user-pool-id "$USER_POOL_ID" \
              --username "$ADMIN_USERNAME" \
              --group-name admin \
              --region "$AWS_REGION"

            # Create test user and add to user group
            TESTUSER_EMAIL="testuser@example.com"
            TESTUSER_USERNAME="testuser@example.com"
            TESTUSER_PASSWORD="$COGNITO_ADMIN_PASSWORD"

            echo "Test user: $TESTUSER_USERNAME"
            aws cognito-idp admin-get-user --user-pool-id "$USER_POOL_ID" --username "$TESTUSER_USERNAME" --region "$AWS_REGION" || \
            aws cognito-idp admin-create-user \
              --user-pool-id "$USER_POOL_ID" \
              --username "$TESTUSER_USERNAME" \
              --user-attributes Name=email,Value="$TESTUSER_EMAIL" \
              --message-action SUPPRESS \
              --region "$AWS_REGION"

            aws cognito-idp admin-set-user-password \
              --user-pool-id "$USER_POOL_ID" \
              --username "$TESTUSER_USERNAME" \
              --password "$TESTUSER_PASSWORD" \
              --permanent \
              --region "$AWS_REGION"

            aws cognito-idp admin-add-user-to-group \
              --user-pool-id "$USER_POOL_ID" \
              --username "$TESTUSER_USERNAME" \
              --group-name user \
              --region "$AWS_REGION"
          else
            echo "Skipping admin user/group creation: USER_POOL_ID is empty or invalid ($USER_POOL_ID)"
          fi
