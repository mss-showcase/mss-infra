name: Deploy MSS Backend Lambda

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  SHARED_DATA_BUCKET: ${{ vars.SHARED_DATA_BUCKET }}
  SHARED_BUILD_DATA_BUCKET: ${{ vars.SHARED_BUILD_DATA_BUCKET }}
  MSS_BACKEND_LAMBDA_NAME: ${{ vars.MSS_BACKEND_LAMBDA_NAME }}
  MSS_BACKEND_VERSION: 1.0.0
  TICKS_TABLE: ${{ vars.TICKS_TABLE }}
  TICKS_TABLE_ARN: ${{ vars.TICKS_TABLE_ARN }}
  FUNDAMENTALS_TABLE: ${{ vars.FUNDAMENTALS_TABLE }}
  FUNDAMENTALS_TABLE_ARN: ${{ vars.FUNDAMENTALS_TABLE_ARN }}
  DYNAMODB_SENTIMENT_ARTICLES_TABLE: ${{ vars.DYNAMODB_SENTIMENT_ARTICLES_TABLE }}
  DYNAMODB_SENTIMENT_ARTICLES_TABLE_ARN: ${{ vars.DYNAMODB_SENTIMENT_ARTICLES_TABLE_ARN }}
  COGNITO_POOL_ID_FILE: ${{ vars.COGNITO_POOL_ID_FILE }}
  COGNITO_CLIENT_ID_FILE: ${{ vars.COGNITO_CLIENT_ID_FILE }}
  WEBHOSTING_BUCKET: ${{ vars.WEBHOSTING_BUCKET }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2


      - name: Set Lambda artifact location
        run: |
          echo "MSS_BACKEND_LAMBDA_LOCATION_ON_BUCKET=deploy/mss-backend/${MSS_BACKEND_VERSION}/mss-backend-lambda.zip" >> $GITHUB_ENV

      - name: Download $MSS_BACKEND_LAMBDA_NAME artifact from S3 build bucket
        run: |
          echo "Downloading $MSS_BACKEND_LAMBDA_NAME artifact from S3 bucket: ${SHARED_BUILD_DATA_BUCKET}, location: ${MSS_BACKEND_LAMBDA_LOCATION_ON_BUCKET}"
          aws s3 cp s3://${SHARED_BUILD_DATA_BUCKET}/${MSS_BACKEND_LAMBDA_LOCATION_ON_BUCKET} lambda.zip

      - name: Init Terraform
        working-directory: terraform/deploy-backend
        run: terraform init -input=false -upgrade

      - name: Terraform Format Check
        working-directory: terraform/deploy-backend
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: terraform/deploy-backend
        run: terraform validate

      - name: Fetch S3 Website URL
        id: fetch_s3_website_url
        run: |

          echo "S3 Website URL: $BUCKET_WEBSITE_URL"

      - name: Fetch TICKS_TABLE_ARN from AWS
        id: fetch_table_arn
        run: |
          ARN=$(aws dynamodb describe-table --table-name "$TICKS_TABLE" --region "$AWS_REGION" --query "Table.TableArn" --output text)
          echo "TICKS_TABLE_ARN=$ARN" >> $GITHUB_ENV

      - name: Write Terraform variable file
        working-directory: terraform/deploy-backend
        run: |
          WEBHOSTING_WEBSITE_URL=$(aws s3api get-bucket-website --bucket "$WEBHOSTING_BUCKET" --region "$AWS_REGION" --query '"http://" + [BucketWebsiteConfiguration][0].Bucket + ".s3-website-" + `echo $AWS_REGION` + ".amazonaws.com"' --output text 2>/dev/null || echo "http://$WEBHOSTING_BUCKET.s3-website-$AWS_REGION.amazonaws.com")
          echo "WEBHOSTING_WEBSITE_URL=$WEBHOSTING_WEBSITE_URL"
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_POOL_ID_FILE COGNITO_POOL_ID.txt
          COGNITO_POOL_ID=$(tr -d '\n' < COGNITO_POOL_ID.txt)
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_DOMAIN_NAME.txt CLOUDFRONT_DOMAIN_NAME.txt
          CLOUDFRONT_DOMAIN_NAME=$(tr -d '\n' < CLOUDFRONT_DOMAIN_NAME.txt)
          # Fetch Cognito User Pool ARN
          COGNITO_POOL_ARN=$(aws cognito-idp describe-user-pool --user-pool-id "$COGNITO_POOL_ID" --region "$AWS_REGION" --query "UserPool.Arn" --output text)
          echo "COGNITO_POOL_ID=$COGNITO_POOL_ID" >> $GITHUB_ENV
          echo "CLOUDFRONT_DOMAIN_NAME=$CLOUDFRONT_DOMAIN_NAME" >> $GITHUB_ENV
          echo "COGNITO_POOL_ARN=$COGNITO_POOL_ARN" >> $GITHUB_ENV
          aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/$COGNITO_CLIENT_ID_FILE COGNITO_CLIENT_ID.txt
          COGNITO_USER_POOL_CLIENT_ID=$(tr -d '\n' < COGNITO_CLIENT_ID.txt)
          cat <<EOF > ci.auto.tfvars
          mss_backend_lambda_name = "${MSS_BACKEND_LAMBDA_NAME}"
          mss_backend_lambda_s3_key = "${MSS_BACKEND_LAMBDA_LOCATION_ON_BUCKET#'/'}"
          build_data_bucket  = "${SHARED_BUILD_DATA_BUCKET}"
          shared_data_bucket = "${SHARED_DATA_BUCKET}"
          ticks_table        = "${TICKS_TABLE}"
          ticks_table_arn    = "${TICKS_TABLE_ARN}"
          fundamentals_table = "${FUNDAMENTALS_TABLE}"
          fundamentals_table_arn = "${FUNDAMENTALS_TABLE_ARN}"
          dynamodb_sentiment_articles_table = "${DYNAMODB_SENTIMENT_ARTICLES_TABLE}"
          dynamodb_sentiment_articles_table_arn = "${DYNAMODB_SENTIMENT_ARTICLES_TABLE_ARN}"
          cloudfront_domain_name = "${CLOUDFRONT_DOMAIN_NAME}"
          cognito_pool_id = "${COGNITO_POOL_ID}"
          cognito_pool_arn = "${COGNITO_POOL_ARN}"
          webhosting_website_url = "${WEBHOSTING_WEBSITE_URL}"
          cognito_user_pool_client_id = "${COGNITO_USER_POOL_CLIENT_ID}"
          aws_region = "${AWS_REGION}"
          EOF

      - name: Terraform plan
        working-directory: terraform/deploy-backend
        run: terraform plan -input=false -var-file=ci.auto.tfvars

      - name: Terraform Import Lambda Log Group
        working-directory: terraform/deploy-backend
        run: |
          terraform import -input=false -var-file=ci.auto.tfvars aws_cloudwatch_log_group.mss_backend_lambda_log_group "/aws/lambda/${MSS_BACKEND_LAMBDA_NAME}" || true

      - name: Terraform Import Lambda Function
        working-directory: terraform/deploy-backend
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_lambda_function.mss_backend_lambda $MSS_BACKEND_LAMBDA_NAME || true

      - name: Terraform Import Lambda Exec Role
        working-directory: terraform/deploy-backend
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_iam_role.lambda_exec_role ${MSS_BACKEND_LAMBDA_NAME}-exec-role || true

      - name: Terraform Import Lambda Permission
        working-directory: terraform/deploy-backend
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_lambda_permission.apigw_invoke ${MSS_BACKEND_LAMBDA_NAME}/AllowAPIGatewayInvoke || true

      - name: Terraform Import Lambda Policy
        working-directory: terraform/deploy-backend
        run: |
          POLICY_ARN=$(aws iam list-policies --scope Local --query "Policies[?PolicyName=='mss_backend_lambda_policy'].Arn" --output text)
          if [ -n "$POLICY_ARN" ]; then
            terraform import -input=false -var-file=ci.auto.tfvars aws_iam_policy.mss_backend_lambda_policy $POLICY_ARN || true
          else
            echo "Policy mss_backend_lambda_policy not found, skipping import."
          fi

      - name: Terraform Import API Gateway HTTP API
        working-directory: terraform/deploy-backend
        run: |
          API_ID=$(aws apigatewayv2 get-apis --region "$AWS_REGION" --query "Items[?Name=='mss-backend-api'].ApiId" --output text)
          if [ -n "$API_ID" ]; then
            terraform import -input=false -var-file=ci.auto.tfvars aws_apigatewayv2_api.mss_backend_api $API_ID || true
          else
            echo "API mss-backend-api not found, skipping import."
          fi

      - name: Terraform Import API Gateway Routes (looped)
        working-directory: terraform/deploy-backend
        run: |
          API_ID=$(aws apigatewayv2 get-apis --region "$AWS_REGION" --query "Items[?Name=='mss-backend-api'].ApiId" --output text)
          if [ -z "$API_ID" ]; then
            echo "API mss-backend-api not found, skipping all route imports."
            exit 0
          fi

          declare -A ROUTES=(
            [stocks_route]="GET /stocks"
            [ticks_route]="GET /ticks/{symbol}"
            [fundamentals_route]="GET /fundamentals/{symbol}"
            [fundamentals_list_route]="GET /fundamentals/list"
            [analysis_ta_stockmarkers_route]="GET /analysis/ta/stockmarkers"
            [analysis_ta_stockmarker_route]="GET /analysis/ta/stockmarker/{ticker}/{markerid}"
            [analysis_explanation_route]="GET /analysis/{ticker}/explanation"
            # Cognito-related and user management routes
            [auth_register_route]="POST /auth/register"
            [auth_login_route]="POST /auth/login"
            [auth_logout_route]="POST /auth/logout"
            [user_me_get_route]="GET /user/me"
            [user_me_put_route]="PUT /user/me"
            [user_list_route]="GET /user/list"
            [user_setadmin_route]="PUT /user/setadmin"
            [user_setenabled_route]="PUT /user/setenabled"
          )

          for NAME in "${!ROUTES[@]}"; do
            ROUTE_KEY="${ROUTES[$NAME]}"
            ROUTE_ID=$(aws apigatewayv2 get-routes --api-id "$API_ID" --region "$AWS_REGION" --query "Items[?RouteKey=='$ROUTE_KEY'].RouteId" --output text)
            if [ -n "$ROUTE_ID" ]; then
              echo "Importing route $ROUTE_KEY as $NAME ($API_ID/$ROUTE_ID)"
              terraform import -input=false -var-file=ci.auto.tfvars aws_apigatewayv2_route.$NAME "$API_ID/$ROUTE_ID" || true
            else
              echo "Route $ROUTE_KEY not found, skipping import."
            fi
          done


      - name: Terraform Import API Gateway Stage
        working-directory: terraform/deploy-backend
        run: |
          API_ID=$(aws apigatewayv2 get-apis --region "$AWS_REGION" --query "Items[?Name=='mss-backend-api'].ApiId" --output text)
          if [ -n "$API_ID" ]; then
            terraform import -input=false -var-file=ci.auto.tfvars aws_apigatewayv2_stage.mss_backend_stage "$API_ID/\$default" || true
          else
            echo "API mss-backend-api not found, skipping stage import."
          fi

      - name: Terraform Import API Gateway Authorizer
        working-directory: terraform/deploy-backend
        run: |
          API_ID=$(aws apigatewayv2 get-apis --region "$AWS_REGION" --query "Items[?Name=='mss-backend-api'].ApiId" --output text)
          if [ -n "$API_ID" ]; then
            AUTHORIZER_ID=$(aws apigatewayv2 get-authorizers --api-id "$API_ID" --region "$AWS_REGION" --query "Items[?Name=='CognitoJWT'].AuthorizerId" --output text)
            if [ -n "$AUTHORIZER_ID" ]; then
              terraform import -input=false -var-file=ci.auto.tfvars aws_apigatewayv2_authorizer.cognito_jwt "$API_ID/$AUTHORIZER_ID" || true
            else
              echo "Authorizer CognitoJWT not found, skipping import."
            fi
          else
            echo "API mss-backend-api not found, skipping authorizer import."
          fi

      - name: Terraform apply
        working-directory: terraform/deploy-backend
        run: terraform apply -input=false -auto-approve -var-file=ci.auto.tfvars
