name: Deploy MSS Stock Data Source Lambda

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read

# github org vars and secrets
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  SHARED_DATA_BUCKET: ${{ vars.SHARED_DATA_BUCKET }} # used for app data
  SHARED_BUILD_DATA_BUCKET: ${{ vars.SHARED_BUILD_DATA_BUCKET }} # used for build artifacts
  ALPHAVANTAGE_API_KEY: ${{ secrets.ALPHAVANTAGE_API_KEY }} # API key for Alpha Vantage
  LAMBDA_NAME: ${{ vars.MSS_STOCK_DATA_SOURCE_LAMBDA_NAME }} # Name of the Lambda function
  MSS_STOCK_DATA_SOURCE_VERSION: 1.0.0

# This workflow deploys the MSS Stock Data Source Lambda function.
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

# from here we are working on the cloudfront preparation

      - name: Download Key Group ID file from S3
        run: aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_KEY_GROUP_ID.txt CLOUDFRONT_KEY_GROUP_ID.txt --region $AWS_REGION

      - name: Download Private Key Secret Name file from S3
        run: aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_PRIVATE_KEY_SECRET_NAME.txt CLOUDFRONT_PRIVATE_KEY_SECRET_NAME.txt --region $AWS_REGION
      
      - name: Download CloudFront Distribution ID from S3 (if exists)
        run: aws s3 cp s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_DISTRIBUTION_ID.txt CLOUDFRONT_DISTRIBUTION_ID.txt --region $AWS_REGION || true

      - name: Set env vars
        run: |
          echo "CLOUDFRONT_KEY_GROUP_ID=$(tr -d '\n' < CLOUDFRONT_KEY_GROUP_ID.txt)" >> "$GITHUB_ENV"
          echo "PRIVATE_KEY_SECRET_NAME=$(tr -d '\n' < CLOUDFRONT_PRIVATE_KEY_SECRET_NAME.txt)" >> "$GITHUB_ENV"
          echo "CLOUDFRONT_DISTRIBUTION_ID=$(tr -d '\n' < CLOUDFRONT_DISTRIBUTION_ID.txt)" >> "$GITHUB_ENV"

      - name: Debug env vars
        run: |
          echo "CLOUDFRONT_KEY_GROUP_ID=$CLOUDFRONT_KEY_GROUP_ID"
          echo "PRIVATE_KEY_SECRET_NAME=$PRIVATE_KEY_SECRET_NAME"
          echo "CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID"

      - name: Download private key from AWS Secrets Manager
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          aws secretsmanager get-secret-value --secret-id "$PRIVATE_KEY_SECRET_NAME" --region "$AWS_REGION" --query SecretString --output text > private.pem


# from here we are working on the artifact deploy 

      - name: Download $LAMBDA_NAME artifact from S3 build bucket
        run: |
          aws s3 cp s3://${SHARED_BUILD_DATA_BUCKET}/deploy/mss-stock-data-source/$MSS_STOCK_DATA_SOURCE_VERSION/${LAMBDA_NAME}.zip lambda.zip

      - name: Init Terraform
        working-directory: terraform/mss-stock-data-source
        run: terraform init -input=false -upgrade

      - name: Terraform Format Check
        working-directory: terraform/mss-stock-data-source
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: terraform/mss-stock-data-source
        run: terraform validate

      - name: Write Terraform variable file
        working-directory: terraform/mss-stock-data-source
        run: |
          cat <<EOF > ci.auto.tfvars
          lambda_version            = "${MSS_STOCK_DATA_SOURCE_VERSION}"
          app_data_bucket           = "${SHARED_DATA_BUCKET}"
          build_data_bucket         = "${SHARED_BUILD_DATA_BUCKET}"
          lambda_name               = "${LAMBDA_NAME}"
          cloudfront_key_group_id   = "${CLOUDFRONT_KEY_GROUP_ID}"
          alphavantage_api_key      = "${ALPHAVANTAGE_API_KEY}"
          artifact_key              = "deploy/mss-stock-data-source/${MSS_STOCK_DATA_SOURCE_VERSION}/${LAMBDA_NAME}.zip"
          EOF
      - name: Terraform plan
        working-directory: terraform/mss-stock-data-source
        run: terraform plan -input=false -var-file=ci.auto.tfvars

      - name: Terraform Import IAM Role
        working-directory: terraform/mss-stock-data-source
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_iam_role.lambda_exec_role mss-lambda-exec-role || true

      - name: Terraform Import Lambda Function
        working-directory: terraform/mss-stock-data-source
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_lambda_function.stock_data_lambda $LAMBDA_NAME || true

      - name: Terraform Import Lambda Allow Events Permission
        working-directory: terraform/mss-stock-data-source
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_lambda_permission.allow-events stock_data_lambda/AllowExecutionFromCloudWatch || true

      - name: Terraform CloudFront Distribution
        working-directory: terraform/mss-stock-data-source
        run: terraform import -input=false -var-file=ci.auto.tfvars aws_cloudfront_distribution.cf_distribution $id || true

      - name: Terraform apply
        working-directory: terraform/mss-stock-data-source
        run: terraform apply -input=false -auto-approve -var-file=ci.auto.tfvars

      - name: Get CloudFront Distribution ID output from Terraform
        id: cf_output
        working-directory: terraform/mss-stock-data-source
        run: |
          id=$(terraform output -raw cloudfront_distribution_id)
          echo "$id" > ../../CLOUDFRONT_DISTRIBUTION_ID.txt
      - name: Upload CloudFront Distribution ID to S3
        run: aws s3 cp CLOUDFRONT_DISTRIBUTION_ID.txt s3://$SHARED_BUILD_DATA_BUCKET/CLOUDFRONT_DISTRIBUTION_ID.txt --region $AWS_REGION
